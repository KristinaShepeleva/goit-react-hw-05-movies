{"version":3,"file":"static/js/173.0a4ab57c.chunk.js","mappings":"+SAOMA,EAAM,mCAECC,EAAS,mCAAG,6GAEDC,EAAAA,EAAAA,IAAA,kEACuCF,EADvC,oBAFC,cAElBG,EAFkB,yBAMhBA,EAASC,KAAKC,SANE,gCAQpBC,QAAQC,IAAR,MARoB,yDAAH,qDAYTC,EAAgB,mCAAG,WAAOC,GAAP,gGAERP,EAAAA,EAAAA,IAAA,4DACiCF,EADjC,kBAC8CS,EAD9C,oBAFQ,cAEzBN,EAFyB,yBAKnBA,EAASC,KAAKC,SALK,gCAQ3BC,QAAQC,IAAR,MAR2B,yDAAH,sDAYhBG,EAAkB,mCAAG,WAAOC,GAAP,gGAEVT,EAAAA,EAAAA,IAAA,6CACkBS,EADlB,oBACgCX,EADhC,oBAFU,cAE3BG,EAF2B,yBAKrBA,EAASC,MALY,gCAQ7BE,QAAQC,IAAR,MAR6B,yDAAH,sDAYlBK,EAAkB,mCAAG,WAAOD,GAAP,gGAEVT,EAAAA,EAAAA,IAAA,6CACkBS,EADlB,4BACwCX,EADxC,oBAFU,cAE3BG,EAF2B,yBAMzBA,EAASC,KAAKS,MANW,gCAQ7BP,QAAQC,IAAR,MAR6B,yDAAH,sDAalBO,EAAkB,mCAAI,WAAOH,GAAP,gGAEXT,EAAAA,EAAAA,IAAA,6CACkBS,EADlB,4BACwCX,EADxC,oBAFW,cAE5BG,EAF4B,OAKjCG,QAAQC,IAAIJ,EAASC,KAAKC,SALO,kBAM1BF,EAASC,KAAKC,SANY,gCAQ9BC,QAAQC,IAAR,MAR8B,yDAAJ,qD,oDC3B/B,IA3BmB,SAAC,GAAgB,IAAdQ,EAAa,EAAbA,OACfC,GAAWC,EAAAA,EAAAA,MAChB,OACE,+BACE,wBACGF,EAAOG,KAAI,gBAAGP,EAAH,EAAGA,GAAIQ,EAAP,EAAOA,eAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaT,GAAMU,MAAO,CAAEC,KAAMN,GAA1C,UAEE,uBAAIG,OAHCR,EADC,OAWnB,C,iHCmCD,UAjDe,WAAO,IAAD,EACnB,GAA4BY,EAAAA,EAAAA,UAAS,MAArC,eAAOR,EAAP,KAAeS,EAAf,KACE,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMtB,EAAK,UAAGqB,EAAaE,IAAI,gBAApB,QAAgC,IAE7CC,EAAAA,EAAAA,YAAU,WACM,KAAVxB,GACAA,GAVa,oCAWfR,CAAUQ,EAEb,GAAE,CAACA,IAbe,wCAuBnB,WAAyBA,GAAzB,uFAEGiB,GAAW,GAFd,UAGuBlB,EAAAA,EAAAA,IAAiBC,GAHxC,OAGUL,EAHV,OAIIoB,EAAUpB,GAJd,gDAOMwB,EAAS,kCAPf,yBASGF,GAAW,GATd,4EAvBmB,wBAoCnB,OACE,iCACE,kBAAMQ,SAtBa,SAAAC,GACrBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfP,EAAgB,CAAEtB,MAAO4B,EAAKE,SAAS9B,MAAM+B,QAC7CH,EAAKI,OACN,EAiBG,WACE,kBAAOC,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,uBAEGjB,GAAW,cACXV,IAAU,SAAC,IAAD,CAAYA,OAAQA,IAC9BY,IAAS,6DAInB,C","sources":["api/fechApi.js","page/MoviesList/MoviesList.js","page/MoviesPage/MoviesPage.js"],"sourcesContent":["import axios from 'axios';\n\n\n//https://api.themoviedb.org/3/movie/550?api_key=4e74e3ce82b875f858122cbc5cfec5bf\n\n\n\nconst KEY = '4e74e3ce82b875f858122cbc5cfec5bf';\n\nexport const getMovies = async () => {\n    try {\n const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}&language=en-US`\n  );\n\n  return response.data.results;\n    } catch (error) {\n     console.log(error);\n   }\n};\n\nexport const getMoviesByQuery = async (query) => {\n    try {\n const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${query}&language=en-US`\n      );\n      return response.data.results;\n      \n    } catch (error) {\n     console.log(error);\n   }\n};\n\nexport const fetchMoviesDetails = async (id) => {\n    try {\n const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=en-US`\n      );\n      return response.data;\n      \n    } catch (error) {\n     console.log(error);\n   }\n}\n\nexport const fetchMoviesCredits = async (id) => {\n    try {\n const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n   \n  return response.data.cast;\n    } catch (error) {\n     console.log(error);\n   }\n}\n\n\nexport const fetchMoviesReviews  = async (id) => {\n    try {\n const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${KEY}&language=en-US`\n  );\n  console.log(response.data.results);\n  return response.data.results;\n    } catch (error) {\n     console.log(error);\n   }\n}\n\n\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n const location = useLocation();\n  return (\n    <>\n      <ul>\n        {movies.map(({ id, original_title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              \n              <p>{original_title}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  \n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default MoviesList;","import { getMoviesByQuery } from 'api/fechApi';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport  MoviesList from 'page/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n    \n    const query = searchParams.get('query') ?? \"\";\n    \n  useEffect(() => {\n    if (query === \"\") return;\n    if (query) {\n      getMovies(query);\n      }   \n  }, [query]);\n\n\n    const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    setSearchParams({ query: form.elements.query.value });\n    form.reset();\n  };\n      \n  async function getMovies(query) {\n    try {\n     setLoading(true);\n      const data = await getMoviesByQuery(query);\n      setMovies(data);\n      \n    } catch {\n        setError('Ooops. Something went wrong...');\n    }finally {\n     setLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" />\n        <button type=\"submit\">Search</button>\n          </form>\n          {loading && 'Loading ...'}\n          {movies && <MoviesList movies={movies} />}\n          {error && <p>Something went wrong. Try again</p>}\n      \n    </>\n  );\n};\nexport default Movies;\n\n"],"names":["KEY","getMovies","axios","response","data","results","console","log","getMoviesByQuery","query","fetchMoviesDetails","id","fetchMoviesCredits","cast","fetchMoviesReviews","movies","location","useLocation","map","original_title","to","state","from","useState","setMovies","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","onSubmit","e","preventDefault","form","currentTarget","elements","value","reset","type","name"],"sourceRoot":""}